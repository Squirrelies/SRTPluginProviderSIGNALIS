name: "Automated Release"

on:
  push:
    branches:
      - main

jobs:
  build:
    name: "Build"
    runs-on: "windows-latest"
    env:
      working-directory: .
      project-name: SRTPluginProviderSIGNALIS
      platform: x64
      configuration: Release
    outputs:
      project-name: ${{env.project-name}}
      solution: ${{steps.generated-variables-1.outputs.solution}}
      project: ${{steps.generated-variables-1.outputs.project}}
      build-directory: ${{steps.generated-variables-1.outputs.build-directory}}
      zip-filename: ${{steps.generated-variables-2.outputs.zip-filename}}
      version: ${{steps.project-version-string.outputs.Version}}

    steps:
    # Checkout latest code
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    # Create repo user folder for the dependencies
    - name: Create repo user folder
      run: New-Item -ItemType directory -Path ..\..\SpeedRunTool
    
    # Checkout latest dependencies code
    - name: Checkout SRTHost
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        path: SRTHost
        repository: SpeedRunTool/SRTHost

    # GITHUB_WORKSPACE pathing is ass. Move this directory down one level.
    - name: Move SRTHost down a folder to work with existing csproj pathing
      run: Move-Item -Path SRTHost -Destination ..\..\SpeedRunTool
      
    ## Create repo user folder for the dependencies
    #- name: Create repo user folder
    #  run: New-Item -ItemType directory -Path ..\..

    # Checkout latest dependencies code
    - name: Checkout ProcessMemory
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        path: ProcessMemory
        repository: Squirrelies/ProcessMemory

    # GITHUB_WORKSPACE pathing is ass. Move this directory down one level.
    - name: Move ProcessMemory down a folder to work with existing csproj pathing
      run: Move-Item -Path ProcessMemory -Destination ..\..

    # Set some output variables
    - name: Set the main environment variables based on other environment variables
      id: generated-variables-1
      run: |
        echo 'solution=${{env.project-name}}.sln' >> $env:GITHUB_OUTPUT
        echo 'project=${{env.project-name}}/${{env.project-name}}.csproj' >> $env:GITHUB_OUTPUT
        echo 'build-directory=${{env.project-name}}/bin/${{env.platform}}/Release/net5.0/' >> $env:GITHUB_OUTPUT

    - name: Get project version information
      id: project-versions
      run: Select-String -Path "${{steps.generated-variables-1.outputs.project}}" '<(?<TagName>\w*?Version)>(?<Major>\d+)(?:\.(?<Minor>\d+))(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?</\w*?Version>' -AllMatches | Foreach-Object -Process {$_.Matches} | Foreach-Object -Process { $tagName = $_.Groups["TagName"].Value; $_.Groups | Where-Object { $_.Name -ne "0" -and $_.Name -ne "TagName"; } } | Foreach-Object -Process { $tagName + "_" + $_.Name + "=" + $_.Value >> $env:GITHUB_OUTPUT }

    - name: Set project version string
      id: project-version-string
      run: |
        echo 'Version=${{steps.project-versions.outputs.Version_Major}}.${{steps.project-versions.outputs.Version_Minor}}.${{steps.project-versions.outputs.Version_Patch}}${{inputs.releaseTypeTag}}' >> $env:GITHUB_OUTPUT
    - name: Ensure we detected the version properly
      id: assert-version
      if: ${{ steps.project-version-string.outputs.Version == format('..{0}', inputs.releaseTypeTag) }}
      run: exit 1

    # Sets the zip-filename output variable based on the project version
    - name: Sets the zip-filename environment variable based on the project version
      id: generated-variables-2
      run: |
        echo 'zip-filename=${{env.project-name}}-v${{steps.project-version-string.outputs.Version}}.zip' >> $env:GITHUB_OUTPUT

    # Install .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 5.0.x
        dotnet-quality: 'ga'

    # Compiles the plugin
    - name: Compile the plugin
      run: dotnet build ${{steps.generated-variables-1.outputs.solution}} /p:"Configuration=${{env.configuration}};Platform=${{env.platform}};VERSION=${{steps.project-version-string.outputs.Version}}"
    
    - name: Upload publish artifacts
      uses: actions/upload-artifact@v2
      with:
        path: ${{steps.generated-variables-1.outputs.build-directory}}*

  release:
    name: "Release"
    runs-on: "windows-latest"
    needs: build
    env:
      working-directory: .
      is-prerelease: true

    steps:
    # Checkout latest code
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    # Decode the base 64 encoded pfx and save the code signing certificate
    - name: Decode the PFX
      run: |
        Set-Content -Path 'CodeSign.txt' -Value '${{ secrets.CERTIFICATE }}'
        certutil -decode 'CodeSign.txt' 'CodeSign.pfx'
        Remove-Item -Path 'CodeSign.txt'
        
    - name: Code sign the dll
      run: |
        $filesToSign = (Get-ChildItem -Path 'artifact/' -Filter ${{env.project-name}}.dll).fullname
        foreach ($fileToSign in $filesToSign) {
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/signtool.exe" sign /tr "http://timestamp.digicert.com" /td SHA1 /f "CodeSign.pfx" /p "${{secrets.CERTIFICATE_PASS}}" /fd SHA1 "$fileToSign"
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/signtool.exe" sign /tr "http://timestamp.digicert.com" /td SHA1 /f "CodeSign.pfx" /p "${{secrets.CERTIFICATE_PASS}}" /fd SHA256 /as "$fileToSign"
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/signtool.exe" sign /tr "http://timestamp.digicert.com" /td SHA1 /f "CodeSign.pfx" /p "${{secrets.CERTIFICATE_PASS}}" /fd SHA512 /as "$fileToSign"
        }
    - name: Remove the PFX file
      run: |
        Remove-Item -Path 'CodeSign.pfx'

    # Zip the publish artifacts
    - name: Zip the publish artifacts
      run: |
        Add-Type -assembly 'System.IO.Compression'
        Add-Type -assembly 'System.IO.Compression.FileSystem'
        [System.IO.Compression.ZipArchive]$zipFile = [System.IO.Compression.ZipFile]::Open('${{needs.build.outputs.zip-filename}}', ([System.IO.Compression.ZipArchiveMode]::Create))
        [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'LICENSE', '${{needs.build.outputs.project-name}}\LICENSE')
        $filesToZip = (Get-ChildItem -Path artifact -File -Recurse).FullName
        foreach ($fileToZip in $filesToZip) {
          $fileNameInZip = $fileToZip.Replace(($pwd.Path + '\artifact\'),'')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, $fileToZip, ('${{needs.build.outputs.project-name}}\' + $fileNameInZip))
        }
        $zipFile.Dispose()

    # Pushes the release
    - name: Publish release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: ${{env.is-prerelease}}
        title: 'Automated Build - ${{needs.build.outputs.version}} Release'
        files: ${{needs.build.outputs.zip-filename}}
